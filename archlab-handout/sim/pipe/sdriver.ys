#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# Adding IIADDQ
# Loop unroll 8x1 to reduce overhead for >= 8
# Small Loop unroll for cases of <= 7 elements
# Best CPE = 8.06 so far
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	# len was 9, limit = 6, endL = 3; (in case of 4x1 loop unroll)
	iaddq -7, %rdx		# limit = len-3, prep for loop unroll
	jle LastElements  #if limit is -2,-1,0 means there was 1,2,3 elements respectively in list, if -3, no elements in list
	

Loop:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13	# read val from src...
	mrmovq 48(%rdi), %r14	# read val from src...
	mrmovq 56(%rdi), %rbx	# read val from src...

	iaddq 64, %rdi		# src++
	
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)# ...and store it to dst
	rmmovq %r10, 16(%rsi)# ...and store it to dst
	rmmovq %r11, 24(%rsi)# ...and store it to dst
	rmmovq %r12, 32(%rsi)# ...and store it to dst
	rmmovq %r13, 40(%rsi)# ...and store it to dst
	rmmovq %r14, 48(%rsi)# ...and store it to dst
	rmmovq %rbx, 56(%rsi)# ...and store it to dst
	iaddq 64, %rsi		# dst++
	andq %r8, %r8		# val <= 0?
	jle EleTwoCheck		# if so, goto Npos: 
	iaddq 1, %rax		# count++ #conditional addq?
EleTwoCheck:	
	andq %r9, %r9		# val <= 0?
	jle EleThreeCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleThreeCheck:	
	andq %r10, %r10		# val <= 0?
	jle EleFourCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleFourCheck:	
	andq %r11, %r11		# val <= 0?
	jle EleFiveCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleFiveCheck:	
	andq %r12, %r12		# val <= 0?
	jle EleSixCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleSixCheck:	
	andq %r13, %r13		# val <= 0?
	jle EleSevenCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleSevenCheck:	
	andq %r14, %r14		# val <= 0?
	jle EleEightCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleEightCheck:	
	andq %rbx, %rbx		# val <= 0?
	jle EndLoop
	iaddq 1, %rax		# count++ #conditional addq?
EndLoop:
	iaddq -8, %rdx		# len--
	jg Loop
LastElements:
	iaddq 7, %rdx #add limit offset to limit
	je Done	#if limit is 0, means there are #if limit is 0, means there are no elements left (len is multiple of unroll factor)no elements left (len is multiple of unroll factor)
	iaddq -1, %rdx
	je OneLeft
	iaddq -2, %rdx
	jle TwoE

FourE:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	iaddq 32, %rdi
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)# ...and store it to dst
	rmmovq %r10, 16(%rsi)# ...and store it to dst
	rmmovq %r11, 24(%rsi)# ...and store it to dst
	iaddq 32, %rsi
	andq %r8, %r8		# val <= 0?
	jle FourEleTwoCheck		# if so, goto Npos: 
	iaddq 1, %rax		# count++ #conditional addq?
FourEleTwoCheck:	
	andq %r9, %r9		# val <= 0?
	jle FourEleThreeCheck
	iaddq 1, %rax		# count++ #conditional addq?
FourEleThreeCheck:	
	andq %r10, %r10		# val <= 0?
	jle FourEleFourCheck
	iaddq 1, %rax		# count++ #conditional addq?
FourEleFourCheck:	
	andq %r11, %r11		# val <= 0?
	jle FourEEnd
	iaddq 1, %rax		# count++ #conditional addq?
FourEEnd:
	iaddq -1, %rdx #at this point before adding rdx must be >= 1
	je Done #if rdx is now 0, there were 4 elements
	iaddq -1, %rdx 
	je OneLeft #if rdx is now 0, there were 5 elements
	iaddq -2, %rdx #at this point len was 6 or 7, meaning rdx before add must be 1 or 2 respectively, we add -2 to match behavior of TwoEEnd in case of only 2 or 3 elements in len
TwoE:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	iaddq 16, %rdi
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)# ...and store it to dst
	iaddq 16, %rsi
	andq %r8, %r8		# val <= 0?
	jle TwoETwoElementCheck		# if so, goto Npos: 
	iaddq 1, %rax		# count++ #conditional addq?
TwoETwoElementCheck:	
	andq %r9, %r9		# val <= 0?
	jle TwoEEnd
	iaddq 1, %rax		# count++ #conditional addq?
TwoEEnd:
	andq %rdx, %rdx
	jl Done # if limit is < 0, means there was even amount of elements
OneLeft:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done			# if so, goto NPos: 
	iaddq 1, %rax		# count++ #conditional addq?


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
