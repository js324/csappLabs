#######################################################################
# Test for copying block of size 11;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $11, %rdx		# src and dst have 11 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# Adding IIADDQ
# Loop unroll 8x1 to reduce overhead
# Jumptable at end
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	# len was 9, limit = 6, endL = 3; (in case of 4x1 loop unroll)
	iaddq -7, %rdx		# limit = len-3, prep for loop unroll
	# andq %rdx,%rdx		# limit <= 0?
	jle LastElements  #if limit is -2,-1,0 means there was 1,2,3 elements respectively in list, if -3, no elements in list
	

Loop:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13	# read val from src...
	mrmovq 48(%rdi), %r14	# read val from src...
	mrmovq 56(%rdi), %rbx	# read val from src...

	iaddq 64, %rdi		# src++
	iaddq -8, %rdx		# len--
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)# ...and store it to dst
	rmmovq %r10, 16(%rsi)# ...and store it to dst
	rmmovq %r11, 24(%rsi)# ...and store it to dst
	rmmovq %r12, 32(%rsi)# ...and store it to dst
	rmmovq %r13, 40(%rsi)# ...and store it to dst
	rmmovq %r14, 48(%rsi)# ...and store it to dst
	rmmovq %rbx, 56(%rsi)# ...and store it to dst
	iaddq 64, %rsi		# dst++
	andq %r8, %r8		# val <= 0?
	jle EleTwoCheck		# if so, goto Npos: 
	iaddq 1, %rax		# count++ #conditional addq?
EleTwoCheck:	
	andq %r9, %r9		# val <= 0?
	jle EleThreeCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleThreeCheck:	
	andq %r10, %r10		# val <= 0?
	jle EleFourCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleFourCheck:	
	andq %r11, %r11		# val <= 0?
	jle EleFiveCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleFiveCheck:	
	andq %r12, %r12		# val <= 0?
	jle EleSixCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleSixCheck:	
	andq %r13, %r13		# val <= 0?
	jle EleSevenCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleSevenCheck:	
	andq %r14, %r14		# val <= 0?
	jle EleEightCheck
	iaddq 1, %rax		# count++ #conditional addq?
EleEightCheck:	
	andq %rbx, %rbx		# val <= 0?
	jle EndLoop
	iaddq 1, %rax		# count++ #conditional addq?
EndLoop:
	andq %rdx, %rdx # len > 0?
	jg Loop
LastElements:
	iaddq 7, %rdx #add limit offset to limit
	# andq %rdx, %rdx 
	je Done	#if limit is 0, means there are #if limit is 0, means there are no elements left (len is multiple of unroll factor)no elements left (len is multiple of unroll factor)
	iaddq -1, %rdx
	je OneLeft
TwoE:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	iaddq 16, %rdi
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)# ...and store it to dst
	iaddq 16, %rsi
	andq %r8, %r8		# val <= 0?
	jle TwoETwoElementCheck		# if so, goto Npos: 
	iaddq 1, %rax		# count++ #conditional addq?
TwoETwoElementCheck:	
	andq %r9, %r9		# val <= 0?
	jle TwoEEnd
	iaddq 1, %rax		# count++ #conditional addq?
TwoEEnd:
	iaddq -2, %rdx
	jl Done # if limit is < 0, means there was even amount of elements
OneLeft:
	mrmovq (%rdi), %r10	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Done			# if so, goto NPos: 
	iaddq 1, %rax		# count++ #conditional addq?


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 7.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $7,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $11,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 3
	.quad 4
	.quad -5
	.quad -6
	.quad -7
	.quad 8
	.quad -9
	.quad 10
	.quad 11
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
