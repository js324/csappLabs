                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f68805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f77803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Adding IIADDQ
                            | # Loop unroll 8x1 to reduce overhead for >= 8
                            | # Small Loop unroll for cases of <= 7 elements
                            | # Best CPE = 8.06 so far
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 	# len was 9, limit = 6, endL = 3; (in case of 4x1 loop unroll)
0x034: c0f2f9ffffffffffffff | 	iaddq -7, %rdx		# limit = len-3, prep for loop unroll
0x03e: 71b601000000000000   | 	jle LastElements  #if limit is -2,-1,0 means there was 1,2,3 elements respectively in list, if -3, no elements in list
                            | 	
                            | 
0x047:                      | Loop:	
0x047: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x051: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x05b: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x065: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x06f: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val from src...
0x079: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val from src...
0x083: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val from src...
0x08d: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx	# read val from src...
                            | 
0x097: c0f74000000000000000 | 	iaddq 64, %rdi		# src++
                            | 	
0x0a1: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x0ab: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)# ...and store it to dst
0x0b5: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)# ...and store it to dst
0x0bf: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)# ...and store it to dst
0x0c9: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)# ...and store it to dst
0x0d3: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)# ...and store it to dst
0x0dd: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)# ...and store it to dst
0x0e7: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)# ...and store it to dst
0x0f1: c0f64000000000000000 | 	iaddq 64, %rsi		# dst++
0x0fb: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0fd: 711001000000000000   | 	jle EleTwoCheck		# if so, goto Npos: 
0x106: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x110:                      | EleTwoCheck:	
0x110: 6299                 | 	andq %r9, %r9		# val <= 0?
0x112: 712501000000000000   | 	jle EleThreeCheck
0x11b: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x125:                      | EleThreeCheck:	
0x125: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x127: 713a01000000000000   | 	jle EleFourCheck
0x130: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x13a:                      | EleFourCheck:	
0x13a: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x13c: 714f01000000000000   | 	jle EleFiveCheck
0x145: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x14f:                      | EleFiveCheck:	
0x14f: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x151: 716401000000000000   | 	jle EleSixCheck
0x15a: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x164:                      | EleSixCheck:	
0x164: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x166: 717901000000000000   | 	jle EleSevenCheck
0x16f: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x179:                      | EleSevenCheck:	
0x179: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x17b: 718e01000000000000   | 	jle EleEightCheck
0x184: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x18e:                      | EleEightCheck:	
0x18e: 6233                 | 	andq %rbx, %rbx		# val <= 0?
0x190: 71a301000000000000   | 	jle EndLoop
0x199: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x1a3:                      | EndLoop:
0x1a3: c0f2f8ffffffffffffff | 	iaddq -8, %rdx		# len--
0x1ad: 764700000000000000   | 	jg Loop
0x1b6:                      | LastElements:
0x1b6: c0f20700000000000000 | 	iaddq 7, %rdx #add limit offset to limit
0x1c0: 737103000000000000   | 	je Done	#if limit is 0, means there are #if limit is 0, means there are no elements left (len is multiple of unroll factor)no elements left (len is multiple of unroll factor)
0x1c9: c0f2ffffffffffffffff | 	iaddq -1, %rdx
0x1d3: 734803000000000000   | 	je OneLeft
0x1dc: c0f2feffffffffffffff | 	iaddq -2, %rdx
0x1e6: 71d702000000000000   | 	jle TwoE
                            | 
0x1ef:                      | FourE:
0x1ef: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x1f9: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x203: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x20d: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val from src...
0x217: c0f72000000000000000 | 	iaddq 32, %rdi
0x221: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x22b: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)# ...and store it to dst
0x235: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)# ...and store it to dst
0x23f: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)# ...and store it to dst
0x249: c0f62000000000000000 | 	iaddq 32, %rsi
0x253: 6288                 | 	andq %r8, %r8		# val <= 0?
0x255: 716802000000000000   | 	jle FourEleTwoCheck		# if so, goto Npos: 
0x25e: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x268:                      | FourEleTwoCheck:	
0x268: 6299                 | 	andq %r9, %r9		# val <= 0?
0x26a: 717d02000000000000   | 	jle FourEleThreeCheck
0x273: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x27d:                      | FourEleThreeCheck:	
0x27d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x27f: 719202000000000000   | 	jle FourEleFourCheck
0x288: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x292:                      | FourEleFourCheck:	
0x292: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x294: 71a702000000000000   | 	jle FourEEnd
0x29d: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x2a7:                      | FourEEnd:
0x2a7: c0f2ffffffffffffffff | 	iaddq -1, %rdx #at this point before adding rdx must be >= 1
0x2b1: 737103000000000000   | 	je Done #if rdx is now 0, there were 4 elements
0x2ba: c0f2ffffffffffffffff | 	iaddq -1, %rdx 
0x2c4: 734803000000000000   | 	je OneLeft #if rdx is now 0, there were 5 elements
0x2cd: c0f2feffffffffffffff | 	iaddq -2, %rdx #at this point len was 6 or 7, meaning rdx before add must be 1 or 2 respectively, we add -2 to match behavior of TwoEEnd in case of only 2 or 3 elements in len
0x2d7:                      | TwoE:
0x2d7: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x2e1: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# read val from src...
0x2eb: c0f71000000000000000 | 	iaddq 16, %rdi
0x2f5: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x2ff: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)# ...and store it to dst
0x309: c0f61000000000000000 | 	iaddq 16, %rsi
0x313: 6288                 | 	andq %r8, %r8		# val <= 0?
0x315: 712803000000000000   | 	jle TwoETwoElementCheck		# if so, goto Npos: 
0x31e: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x328:                      | TwoETwoElementCheck:	
0x328: 6299                 | 	andq %r9, %r9		# val <= 0?
0x32a: 713d03000000000000   | 	jle TwoEEnd
0x333: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
0x33d:                      | TwoEEnd:
0x33d: 6222                 | 	andq %rdx, %rdx
0x33f: 727103000000000000   | 	jl Done # if limit is < 0, means there was even amount of elements
0x348:                      | OneLeft:
0x348: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x352: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x35c: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x35e: 717103000000000000   | 	jle Done			# if so, goto NPos: 
0x367: c0f00100000000000000 | 	iaddq 1, %rax		# count++ #conditional addq?
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x371:                      | Done:
0x371: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x372:                      | End:
                            | #/* $end ncopy-ys */
0x372:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x378:                      | 	.align 8
0x378:                      | src:
0x378: ffffffffffffffff     | 	.quad -1
0x380: feffffffffffffff     | 	.quad -2
0x388: fdffffffffffffff     | 	.quad -3
0x390: fcffffffffffffff     | 	.quad -4
0x398: fbffffffffffffff     | 	.quad -5
0x3a0: faffffffffffffff     | 	.quad -6
0x3a8: 0700000000000000     | 	.quad 7
0x3b0: f8ffffffffffffff     | 	.quad -8
0x3b8: f7ffffffffffffff     | 	.quad -9
0x3c0: 0a00000000000000     | 	.quad 10
0x3c8: f5ffffffffffffff     | 	.quad -11
0x3d0: f4ffffffffffffff     | 	.quad -12
0x3d8: f3ffffffffffffff     | 	.quad -13
0x3e0: 0e00000000000000     | 	.quad 14
0x3e8: f1ffffffffffffff     | 	.quad -15
0x3f0: f0ffffffffffffff     | 	.quad -16
0x3f8: efffffffffffffff     | 	.quad -17
0x400: eeffffffffffffff     | 	.quad -18
0x408: 1300000000000000     | 	.quad 19
0x410: ecffffffffffffff     | 	.quad -20
0x418: 1500000000000000     | 	.quad 21
0x420: eaffffffffffffff     | 	.quad -22
0x428: e9ffffffffffffff     | 	.quad -23
0x430: e8ffffffffffffff     | 	.quad -24
0x438: 1900000000000000     | 	.quad 25
0x440: e6ffffffffffffff     | 	.quad -26
0x448: e5ffffffffffffff     | 	.quad -27
0x450: e4ffffffffffffff     | 	.quad -28
0x458: 1d00000000000000     | 	.quad 29
0x460: 1e00000000000000     | 	.quad 30
0x468: 1f00000000000000     | 	.quad 31
0x470: 2000000000000000     | 	.quad 32
0x478: 2100000000000000     | 	.quad 33
0x480: 2200000000000000     | 	.quad 34
0x488: 2300000000000000     | 	.quad 35
0x490: 2400000000000000     | 	.quad 36
0x498: dbffffffffffffff     | 	.quad -37
0x4a0: daffffffffffffff     | 	.quad -38
0x4a8: d9ffffffffffffff     | 	.quad -39
0x4b0: 2800000000000000     | 	.quad 40
0x4b8: d7ffffffffffffff     | 	.quad -41
0x4c0: 2a00000000000000     | 	.quad 42
0x4c8: d5ffffffffffffff     | 	.quad -43
0x4d0: 2c00000000000000     | 	.quad 44
0x4d8: d3ffffffffffffff     | 	.quad -45
0x4e0: 2e00000000000000     | 	.quad 46
0x4e8: 2f00000000000000     | 	.quad 47
0x4f0: 3000000000000000     | 	.quad 48
0x4f8: 3100000000000000     | 	.quad 49
0x500: ceffffffffffffff     | 	.quad -50
0x508: 3300000000000000     | 	.quad 51
0x510: ccffffffffffffff     | 	.quad -52
0x518: cbffffffffffffff     | 	.quad -53
0x520: caffffffffffffff     | 	.quad -54
0x528: 3700000000000000     | 	.quad 55
0x530: 3800000000000000     | 	.quad 56
0x538: 3900000000000000     | 	.quad 57
0x540: 3a00000000000000     | 	.quad 58
0x548: 3b00000000000000     | 	.quad 59
0x550: 3c00000000000000     | 	.quad 60
0x558: 3d00000000000000     | 	.quad 61
0x560: 3e00000000000000     | 	.quad 62
0x568: 3f00000000000000     | 	.quad 63
0x570: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x580:                      | 	.align 16
0x580:                      | Predest:
0x580: fadebc0000000000     | 	.quad 0xbcdefa
0x588:                      | dest:
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780:                      | Postdest:
0x780: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x788:                      | .align 8
                            | # Run time stack
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
                            | 
0x808:                      | Stack:
